#!/bin/bash

# File to keep track of the last reconnect attempt
last_reconnect_file="/tmp/my_last_vpn_reconnect"

# Network interface for vpn
vpn_interface="proton0" # you can get this from 'ip link' when vpn is on

# Function to check if enough time has elapsed since the last reconnect
# This should help if there are multiple instances of xmobar running (for multi monitor)
function is_reconnect_allowed() {
    local interval=10  # interval in seconds
    local current_time=$(date +%s)
    local last_reconnect_time=0

    # Read the last reconnect time from file
    if [ -f "$last_reconnect_file" ]; then
        last_reconnect_time=$(cat "$last_reconnect_file")
    fi

    # Calculate the time difference
    local time_diff=$((current_time - last_reconnect_time))

    # Check if the difference is greater than or equal to the interval
    if [ $time_diff -ge $interval ]; then
        return 0  # true, reconnect is allowed
    else
        return 1  # false, reconnect is not allowed
    fi
}

# Function to check if the VPN is connected
function is_vpn_connected() {
    if ip link show $vpn_interface &> /dev/null; then
        return 0  # true, VPN is connected
    else
        return 1  # false, VPN is not connected
    fi
}

# File for storing the VPN state
vpn_state_file="/tmp/my_vpn_state"

# Function to get the current VPN state
function get_vpn_state() {
    if [ -f "$vpn_state_file" ]; then
        cat "$vpn_state_file"
    else
        echo "on"  # Default to 'on' if the file does not exist
    fi
}

# Main logic
vpn_state=$(get_vpn_state)
if [ "$vpn_state" = "on" ]; then
    if is_vpn_connected; then
        echo ""  # VPN is connected
    else
        if is_reconnect_allowed; then
            echo "" # means there is an issue
            pgrep -f 'protonvpn connect --fastest' | grep -q . && pgrep -f 'protonvpn connect --fastest' | xargs kill # kill reconnect attempts
            sudo /usr/bin/protonvpn disconnect > /dev/null
            sudo /usr/bin/protonvpn connect --fastest > /dev/null
            # Update the last reconnect time
            date +%s > "$last_reconnect_file"
        else # reconnect is not allowed yet
            echo "" # means it is waiting
        fi
    fi
elif [ "$vpn_state" = "off" ]; then
    pgrep -f 'protonvpn connect --fastest' | grep -q . && pgrep -f 'protonvpn connect --fastest' | xargs kill # kill reconnect attempts
    sudo /usr/bin/protonvpn disconnect > /dev/null
    echo ""  # VPN is turned off
fi






# #!/bin/bash

# # this script, run by xmobar auto starts and ensures the vpn connection is maintianed. also prints status icons to xmobar

# # File to keep track of the last reconnect attempt
# last_reconnect_file="/tmp/last_vpn_reconnect"

# # Network interface for vpn
# vpn_interface="proton0" # you can get this from 'ip link' when vpn is on

# # Function to check if enough time has elapsed since the last reconnect
# # This should help if there are  multiple instances of xmobar running (for multi monitor)
# function is_reconnect_allowed() {
#     local interval=10  # interval in seconds
#     local current_time=$(date +%s)
#     local last_reconnect_time=0

#     # Read the last reconnect time from file
#     if [ -f "$last_reconnect_file" ]; then
#         last_reconnect_time=$(cat "$last_reconnect_file")
#     fi

#     # Calculate the time difference
#     local time_diff=$((current_time - last_reconnect_time))

#     # Check if the difference is greater than or equal to the interval
#     if [ $time_diff -ge $interval ]; then
#         return 0  # true, reconnect is allowed
#     else
#         return 1  # false, reconnect is not allowed
#     fi
# }

# # Function to check if the VPN is connected
# function is_vpn_connected() {
#     if ip link show $vpn_interface &> /dev/null; then
#         return 0  # true, VPN is connected
#     else
#         return 1  # false, VPN is not connected
#     fi
# }

# # Main logic
# if is_vpn_connected; then
#     echo ""  # VPN is connected
# else
#     if is_reconnect_allowed; then
#         echo ""
#         pgrep -f 'protonvpn connect --fastest' | xargs kill # kill reconnect attempts
#         sudo /usr/bin/protonvpn disconnect
#         sudo /usr/bin/protonvpn connect --fastest
#         # Update the last reconnect time
#         date +%s > "$last_reconnect_file"
#     else
#         echo "..." # reconnect is not allowed yet
#     fi
# fi
